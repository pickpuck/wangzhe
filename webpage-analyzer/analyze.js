//AI ‰ºòÂåñ
//Ê∑ªÂä†ÊªëÂä®‰∫ã‰ª∂
const puppeteer = require('puppeteer');
const fs = require('fs');

// URLÊ†áÂáÜÂåñÂáΩÊï∞
function normalizeURL(url) {
  try {
    const u = new URL(url);
    return `${u.origin}${u.pathname}`.toLowerCase();
  } catch {
    return url.split(/[?#]/)[0].toLowerCase();
  }
}

// Ê†ºÂºèÂåñÊñá‰ª∂Â§ßÂ∞è
function formatSize(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// ËµÑÊ∫êÊúâÊïàÊÄßÂà§Êñ≠ÈÄªËæë
function isValidResource(response, buffer) {
  const status = response.status();
  const byteLength = buffer.byteLength;

  // Âà§Êñ≠ËµÑÊ∫êÊòØÂê¶ÊúâÊïà
  const isValid =
    (status >= 200 && status < 400) && // ÂÖÅËÆ∏ 2xx Âíå 3xx ËåÉÂõ¥ÂÜÖÁöÑÁä∂ÊÄÅÁ†Å
    (byteLength > 0 || isZeroSizeAllowed(response)); // ÂÖÅËÆ∏ÁâπÂÆöÊÉÖÂÜµ‰∏ãÁöÑ 0 Â≠óËäÇËµÑÊ∫ê

  if (!isValid) {
    console.warn(
      '‚ö†Ô∏è Êó†ÊïàËµÑÊ∫ê:',
      `URL: ${response.url()}, Status: ${status}, Size: ${byteLength}`
    );
  }

  return isValid;
}

// Âà§Êñ≠ÊòØÂê¶ÂÖÅËÆ∏ 0 Â≠óËäÇËµÑÊ∫ê
function isZeroSizeAllowed(response) {
  const contentType = response.headers()['content-type'] || '';
  const url = response.url();

  // ÂÖÅËÆ∏ÁâπÂÆöÁ±ªÂûãÊàñË∑ØÂæÑÁöÑ 0 Â≠óËäÇËµÑÊ∫ê
  return (
    contentType.includes('text/plain') || // Á©∫ÊñáÊú¨Êñá‰ª∂
    url.endsWith('.json') || // JSON Êñá‰ª∂ÂèØËÉΩ‰∏∫Á©∫
    response.status() === 204 // 204 No Content
  );
}

// ÂàÜÊûêÈ°µÈù¢‰∏ªÂáΩÊï∞
async function analyzePage(url) {
  console.log('üöÄ ÂêØÂä®ÊµèËßàÂô®...');
  const startTime = Date.now(); // ËÆ∞ÂΩïÂêØÂä®Êó∂Èó¥
  const browser = await puppeteer.launch({
    devtools: true,
    headless: false, // ÂêØÁî®ÊúâÁïåÈù¢Ê®°Âºè
    args: ['--start-maximized'],
    defaultViewport: { width: 1920, height: 1080 } // ËÆæÁΩÆÈªòËÆ§ËßÜÂè£Â∞∫ÂØ∏
  });

  const page = await browser.newPage();
  const resources = [];

  // ÂêØÁî®CDPÂÆ¢Êà∑Á´Ø
  const client = await page.createCDPSession();
  await client.send('Network.enable');
  // await client.send('Network.setCacheDisabled', { cacheDisabled: true }); // CDPÁ∫ßÂà´Á¶ÅÁî®ÁºìÂ≠ò

  // Â≠òÂÇ®ÁΩëÁªúËØ∑Ê±ÇÊï∞ÊçÆ
  const networkData = new Map();

  // CDP ÁõëÂê¨
  client.on('Network.loadingFinished', (event) => {
    networkData.set(event.requestId, {
      encodedSize: event.encodedDataLength,
      rawSize: event.dataLength
    });
  });

  // ÁõëÂê¨ÂìçÂ∫î‰∫ã‰ª∂
  page.on('response', async (response) => {
    try {
      const req = response.request();
      const buffer = await response.buffer().catch(() => Buffer.alloc(0));
      const requestId = req._requestId;

      // Ëé∑Âèñ encodedSizeÔºå‰ΩøÁî®Â§öÈáçÂõûÈÄÄ
      const encodedSize = (
        networkData.get(requestId)?.encodedSize ||
        parseInt(response.headers()['content-length'] || '0', 10) ||
        buffer.byteLength ||
        0
      );

      // ‰ΩøÁî®‰ºòÂåñÂêéÁöÑËµÑÊ∫êÊúâÊïàÊÄßÂà§Êñ≠ÈÄªËæë
      const valid = isValidResource(response, buffer);

      resources.push({
        url: req.url(),
        type: req.resourceType(),
        size: buffer.byteLength,
        originalSize: encodedSize,
        status: response.status(),
        headers: response.headers(),
        fromCache: response.fromCache(),
        initiator: req.initiator() || {},
        redirectChain: req.redirectChain().map(r => r.url()),
        isNavigation: req.isNavigationRequest(),
        valid
      });
    } catch (err) {
      console.error('‚ö†Ô∏è ËµÑÊ∫êÊî∂ÈõÜÈîôËØØ:', err.message);
    }
  });

// Â¢ûÂº∫È°µÈù¢Âä†ËΩΩÁ≠ñÁï•
console.log(`üåê Ê≠£Âú®ËÆøÈóÆ: ${url}`);
await Promise.all([
  page.goto(url, {
    // waitUntil: 'networkidle0',
    // timeout: 120000
 waitUntil: 'domcontentloaded', // Êîπ‰∏∫ domcontentloaded ËÄåÈùû networkidle0
    timeout: 120000 // ÂáèÂ∞ëË∂ÖÊó∂Êó∂Èó¥

  }).then(() => console.log('üåê È°µÈù¢ÂØºËà™ÂÆåÊàê')),
  page.waitForNetworkIdle({
    // idleTime: 5000,
    // timeout: 120000
idleTime: 1000, // ÂáèÂ∞ëÁ©∫Èó≤Á≠âÂæÖÊó∂Èó¥
    timeout: 120000

  }).then(() => console.log('üåê ÁΩëÁªúÁ©∫Èó≤'))
]);

// Êñ∞Â¢ûÔºöÊ®°ÊãüÈ°µÈù¢ÊªöÂä®Âà∞Â∫ïÈÉ®
console.log('‚¨áÔ∏è Ê®°ÊãüÈ°µÈù¢ÊªöÂä®Âà∞Â∫ïÈÉ®...');
await autoScroll(page);

// Êñ∞Â¢ûÔºöÊ®°ÊãüÈ°µÈù¢Âêë‰∏äÊªöÂä®‰∏ÄÊ¨°
console.log('‚¨ÜÔ∏è Ê®°ÊãüÈ°µÈù¢Âêë‰∏äÊªöÂä®‰∏ÄÊ¨°...');
await autoScrollUp(page);

// ÊçïËé∑Âä®ÊÄÅÂä†ËΩΩËµÑÊ∫ê
await page.evaluate(() => {
  new MutationObserver(() => {}).observe(document.documentElement, {
    childList: true,
    subtree: true
  });
});
await new Promise(resolve => setTimeout(resolve, 3000));

// ÊªöÂä®Âà∞Â∫ïÈÉ®ÁöÑËæÖÂä©ÂáΩÊï∞
// ÁÆÄÂåñÊªöÂä®ÈÄªËæëÔºåÂáèÂ∞ëÊâßË°åÊó∂Èó¥
async function autoScroll(page) {
  await page.evaluate(async () => {
    return new Promise((resolve) => {
      let totalHeight = 0;
      const distance = 100;
      const timer = setInterval(() => {
        const scrollHeight = document.body.scrollHeight;
        window.scrollBy(0, distance);
        totalHeight += distance;

        if (totalHeight >= scrollHeight) {
          clearInterval(timer);
          resolve();
        }
      }, 100);
    });
  });
}

// ÁßªÈô§Âêë‰∏äÊªöÂä®ÔºåÈÄöÂ∏∏‰∏çÈúÄË¶Å
// Âêë‰∏äÊªöÂä®ÁöÑËæÖÂä©ÂáΩÊï∞
async function autoScrollUp(page) {
  await page.evaluate(async () => {
    await new Promise((resolve) => {
      let totalScrolled = 0;
      const distance = 50; // ÊØèÊ¨°Âêë‰∏äÊªöÂä®ÁöÑË∑ùÁ¶ª
      const timer = setInterval(() => {
        window.scrollBy(0, -distance); // Ë¥üÂÄºË°®Á§∫Âêë‰∏äÊªöÂä®
        totalScrolled += distance;

        if (window.scrollY === 0 || totalScrolled >= document.body.scrollHeight) {
          clearInterval(timer);
          resolve();
        }
      }, 50);
    });
  });
}

  console.log('üìä ÂàÜÊûêËµÑÊ∫ê...');
  const result = {
    timestamp: new Date().toISOString(),
    analyzedUrl: url,
    totalRequests: resources.length,
    totalSize:0,
    css: { count: 0, size: 0, originalSize: 0, urls: [], domainStats: {} },
    js: { count: 0, size: 0, originalSize: 0, urls: [], domainStats: {} },
    images: { count: 0, size: 0, originalSize: 0, urls: [], domainStats: {} },
    fonts: { count: 0, size: 0, originalSize: 0, urls: [], domainStats: {} },
    other: { count: 0, size: 0, originalSize: 0, urls: [],domainStats: {} }
  };

  // Â¢ûÂº∫ËµÑÊ∫êËØÜÂà´ËßÑÂàô
  const isCSSResource = (res) => {
    if (!res.valid || res.headers['content-type']?.includes('font') || res.type !== "stylesheet") return false;
    const ct = (res.headers['content-type'] || '').toLowerCase();
    return [
      res.type === 'stylesheet',
      /\.(css|less|scss|sass|styl)(\?|$)/i.test(res.url),
      ct.includes('text/css'),
      ct.includes('stylesheet')
    ].some(Boolean);
  };

  const isJSResource = (res) => {
    if (!res.valid) return false;
    const ct = (res.headers['content-type'] || '').toLowerCase();
    const JS_MIME_TYPES = [
      'application/javascript',
      'text/javascript',
      'application/x-javascript',
      'module'
    ];
    return [
      res.type === 'script',
      /\.(js|mjs|cjs|jsonp)($|\?)/i.test(res.url),
      JS_MIME_TYPES.some(t => ct.includes(t)),
      res.url.includes('callback=') && ct.includes('application/json')
    ].some(Boolean);
  };

  const isImageResource = (res) => {
    if (!res.valid) return false;
    const ct = (res.headers['content-type'] || '').toLowerCase();
    const IMAGE_MIME_TYPES = [
      'image/jpeg',
      'image/png',
      'image/gif',
      'image/svg+xml',
      'image/webp',
      'image/bmp',
      'image/tiff'
    ];
    return [
      res.type === 'image',
      IMAGE_MIME_TYPES.some(t => ct.includes(t)),
      /\.(jpg|jpeg|png|gif|svg|webp|bmp|tiff)(\?|$)/i.test(res.url)
    ].some(Boolean);
  };

  const isFontResource = (res) => {
    if (!res.valid) return false;
    const ct = (res.headers['content-type'] || '').toLowerCase();
    const FONT_MIME_TYPES = [
      'font/ttf',
      'font/otf',
      'font/woff',
      'font/woff2',
      'application/font-ttf',
      'application/font-otf',
      'application/font-woff',
      'application/font-woff2',
      'application/vnd.ms-fontobject',
      'application/x-font-ttf',
      'application/x-font-otf',
      'application/x-font-woff',
      'application/x-font-woff2'
    ];
    return [
      res.type === 'font',
      FONT_MIME_TYPES.some(t => ct.includes(t)),
      /\.(woff|woff2|ttf|otf|eot)(\?|$)/i.test(res.url)
    ].some(Boolean);
  };

  // ÁªüËÆ°ÈÄªËæë
  const trackers = {
    css: new Map(),
    js: new Map(),
    images: new Map(),
    fonts: new Map()
  };

  resources.forEach(res => {
    if (isCSSResource(res)) handleResource(res, result.css, trackers.css, 'CSS');
    else if (isJSResource(res)) handleResource(res, result.js, trackers.js, 'JS');
    else if (isImageResource(res)) handleResource(res, result.images, trackers.images, 'Image');
    else if (isFontResource(res)) handleResource(res, result.fonts, trackers.fonts, 'Font');
  else if (res.type && !['document', 'script', 'stylesheet', 'image', 'font'].includes(res.type)) {
    handleOtherResource(res, result.other);
  }
});

  // Áªü‰∏ÄÂ§ÑÁêÜËµÑÊ∫êÁªüËÆ°
  function handleResource(res, category, tracker, type) {
    const initiatorKey = [
      res.type,
      res.initiator.type,
      res.initiator.url || '',
      res.initiator.stack?.callFrames[0]?.url || ''
    ].join('|');

    const uniqueKey = `${normalizeURL(res.url)}__${initiatorKey}`;
    if (!tracker.has(uniqueKey)) {
      tracker.set(uniqueKey, true);
      category.urls.push({
        url: res.url,
        normalized: normalizeURL(res.url),
        initiator: res.initiator,
        size: formatSize(res.size),
        originalSize: formatSize(res.originalSize),
        status: res.status,
        cached: res.fromCache,
        redirects: res.redirectChain
      });
      // category.count++;
    }
    category.count++;
    category.size += res.size;
    category.originalSize += res.originalSize;

    updateDomainStats(category, res, type.toLowerCase());
  }

  function handleOtherResource(res, category) {
    category.count++;
    category.size += res.size;
    category.originalSize += res.originalSize;

    category.urls.push({
    url: res.url,
    normalized: normalizeURL(res.url),
    initiator: res.initiator,
    size: formatSize(res.size),
    originalSize: formatSize(res.originalSize),
    status: res.status,
    cached: res.fromCache,
    redirects: res.redirectChain
  });

    
  updateDomainStats(category, res, 'other'); 
  }

 // ‰øÆÊîπ updateDomainStats ÂáΩÊï∞
function updateDomainStats(category, res, resourceType) {
  try {
    const domain = new URL(res.url).hostname;
    if (!category.domainStats[domain]) {
      category.domainStats[domain] = { 
        count: 0, 
        size: 0, 
        originalSize: 0, 
        requests: [] 
      };
    }

    category.domainStats[domain].count++;
    category.domainStats[domain].size += res.size;
    
    // Ê†πÊçÆËµÑÊ∫êÁ±ªÂûã‰ΩøÁî®‰∏çÂêåÂéãÁº©Á≥ªÊï∞ËÆ°ÁÆóÂéüÂßãÂ§ßÂ∞è
    let compressionRatio = 1.0;
    switch(resourceType) {
      case 'css':
        compressionRatio = 0.235;
        break;
      case 'js':
        compressionRatio = 0.33;
        break;
      case 'images':
        compressionRatio = 1.0; // ÂõæÁâáÈÄöÂ∏∏Â∑≤ÂéãÁº©
        break;
      case 'fonts':
        compressionRatio = 1.0; // Â≠ó‰ΩìÈÄöÂ∏∏Â∑≤ÂéãÁº©
        break;
      default:
        compressionRatio = 0.5; // ÈªòËÆ§ÂéãÁº©ÊØî
    }
    
    category.domainStats[domain].originalSize += Math.round(res.size * compressionRatio);

    category.domainStats[domain].requests.push({
      url: res.url,
      size: formatSize(res.size),
      originalSize: formatSize(res.originalSize),
      status: res.status,
      cached: res.fromCache,
      redirects: res.redirectChain
    });
  } catch (e) {
    console.warn(`‚ö†Ô∏è Êó†Ê≥ïËß£Êûê ${res.type} ËµÑÊ∫êÂüüÂêç:`, res.url);
  }
}

  await browser.close();
  const endTime = Date.now(); // ËÆ∞ÂΩïÁªìÊùüÊó∂Èó¥
  result.loadTime = endTime - startTime;

  // ËΩ¨Êç¢Âçï‰Ωç
  ['css', 'js', 'images', 'fonts', 'other'].forEach(type => {
    result[type].totalSize = formatSize(result[type].size);
    result[type].totalOriginalSize = formatSize(result[type].originalSize);
  });
  // ËΩ¨Êç¢Âçï‰Ωç
  result.totalSize= formatSize(result.css.size + result.js.size + result.images.size + result.fonts.size 
    + result.other.size
   );
  result.css.totalSize = formatSize(result.css.size);
  result.css.totalOriginalSize = formatSize(result.css.originalSize*0.235); // Ê∑ªÂä†ÂéüÂßãÂ§ßÂ∞è
  result.js.totalSize = formatSize(result.js.size);
  result.js.totalOriginalSize = formatSize(result.js.originalSize*0.33); // Ê∑ªÂä†ÂéüÂßãÂ§ßÂ∞è
  result.images.totalSize = formatSize(result.images.size); // Ê∑ªÂä†ÂõæÁâáËµÑÊ∫êÊÄªÂ§ßÂ∞è
  result.images.totalOriginalSize = formatSize(result.images.originalSize); // Ê∑ªÂä†ÂéüÂßãÂ§ßÂ∞è
  result.fonts.totalSize = formatSize(result.fonts.size); // Ê∑ªÂä†Â≠ó‰ΩìËµÑÊ∫êÊÄªÂ§ßÂ∞è
  result.fonts.totalOriginalSize = formatSize(result.fonts.originalSize); // Ê∑ªÂä†ÂéüÂßãÂ§ßÂ∞è
  result.other.totalSize = formatSize(result.other.size);
  result.other.totalOriginalSize = formatSize(result.other.originalSize); // Ê∑ªÂä†ÂéüÂßãÂ§ßÂ∞è

 // Âú®Êñá‰ª∂Êú´Â∞æÈôÑËøëÔºåÊâæÂà∞ÂàÜÊûêÂÆåÊàêËæìÂá∫ÈÉ®ÂàÜÔºåÊõøÊç¢‰∏∫‰ª•‰∏ã‰ª£Á†ÅÔºö

  // ‰øùÂ≠òÁªìÊûú
  const timestamp = new Date().getTime();
  fs.writeFileSync(`raw_resources_${timestamp}.json`, JSON.stringify(resources, null, 2));
  fs.writeFileSync(`analysis_${timestamp}.json`, JSON.stringify(result, null, 2));

  console.log('\n‚úÖ ÂàÜÊûêÂÆåÊàê!');
  
  // ‰ª•Ë°®Ê†ºÂΩ¢ÂºèÂ±ïÁ§∫Ê±áÊÄª‰ø°ÊÅØ
  console.log('\nüìã ËµÑÊ∫êÊ±áÊÄªË°®:');
  console.log('---------------------------------------------------------------------');
  console.log('| ËµÑÊ∫êÁ±ªÂûã | ËØ∑Ê±ÇÊï∞Èáè | Êñá‰ª∂Â§ßÂ∞è   | ‰º†ËæìÂ§ßÂ∞è   |');
  console.log('---------------------------------------------------------------------');
  console.log(`| CSS      | ${String(result.css.count).padStart(8)} | ${result.css.totalSize.padStart(10)} | ${result.css.totalOriginalSize.padStart(10)} |`);
  console.log(`| JS       | ${String(result.js.count).padStart(8)} | ${result.js.totalSize.padStart(10)} | ${result.js.totalOriginalSize.padStart(10)} |`);
  console.log(`| ÂõæÁâá     | ${String(result.images.count).padStart(8)} | ${result.images.totalSize.padStart(10)} | ${result.images.totalOriginalSize.padStart(10)} |`);
  console.log(`| Â≠ó‰Ωì     | ${String(result.fonts.count).padStart(8)} | ${result.fonts.totalSize.padStart(10)} | ${result.fonts.totalOriginalSize.padStart(10)} |`);
  console.log(`| ÂÖ∂‰ªñ     | ${String(result.other.count).padStart(8)} | ${result.other.totalSize.padStart(10)} | ${result.other.totalOriginalSize.padStart(10)} |`);
  console.log('---------------------------------------------------------------------');
  console.log(`\nüåê ÊÄªËØ∑Ê±ÇÊï∞: ${result.totalRequests}, üåê ÊÄªÂ§ßÂ∞è: ${result.totalSize}, ‚è∞ ÊÄªÂä†ËΩΩÊó∂Èó¥: ${formatTime(result.loadTime)}`);
  
  // ‰ª•Ë°®Ê†ºÂΩ¢ÂºèÂ±ïÁ§∫ÂüüÂêçÁªüËÆ°
  function printDomainStatsAsTable(domainStats, title) {
    if (Object.keys(domainStats).length === 0) return;
    
    console.log(`\n${title}:`);
    console.log('--------------------------------------------------------------------------');
    console.log('| ÂüüÂêç                 | ËØ∑Ê±ÇÊï∞ | ÊÄªÂ§ßÂ∞è    | ‰º†ËæìÂ§ßÂ∞è  |');
    console.log('--------------------------------------------------------------------------');
    
    Object.entries(domainStats).forEach(([domain, stats]) => {
      // Êà™ÂèñÂüüÂêçÔºåÈÅøÂÖçË°®Ê†ºËøáÂÆΩ
      const displayDomain = domain.length > 20 ? domain.substring(0, 17) + '...' : domain;
      console.log(`| ${displayDomain.padEnd(20)} | ${String(stats.count).padStart(6)} | ${formatSize(stats.size).padStart(9)} | ${formatSize(stats.originalSize).padStart(9)} |`);
    });
    console.log('--------------------------------------------------------------------------');
  }
  
  // ËæìÂá∫ÂêÑËµÑÊ∫êÁ±ªÂûãÁöÑÂüüÂêçÁªüËÆ°Ë°®
  printDomainStatsAsTable(result.css.domainStats, 'üé® CSS ÂüüÂêçÁªüËÆ°Ë°®');
  printDomainStatsAsTable(result.js.domainStats, '‚öôÔ∏è JS ÂüüÂêçÁªüËÆ°Ë°®');
  printDomainStatsAsTable(result.images.domainStats, 'üñºÔ∏è ÂõæÁâáËµÑÊ∫êÂüüÂêçÁªüËÆ°Ë°®');
  printDomainStatsAsTable(result.fonts.domainStats, 'üî§ Â≠ó‰ΩìËµÑÊ∫êÂüüÂêçÁªüËÆ°Ë°®');
  printDomainStatsAsTable(result.other.domainStats, 'üì¶ ÂÖ∂‰ªñËµÑÊ∫êÂüüÂêçÁªüËÆ°Ë°®');


  return result;
}

// Êñ∞Â¢ûÊó∂Èó¥Ê†ºÂºèÂåñÂáΩÊï∞
function formatTime(ms) {
  const seconds = (ms / 1000).toFixed(2);
  return `${seconds} Áßí`;
}

// ÊâßË°åÁ§∫‰æã
const targetUrl = process.argv[2] || 'https://mao.ecer.com/test/benchtesting.com/';
analyzePage(targetUrl).catch(console.error);